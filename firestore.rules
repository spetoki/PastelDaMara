rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for data validation
    function isString(value) {
      return value is string;
    }

    function isNumber(value) {
      return value is number;
    }

    function isOptionalString(value) {
      return value == null || isString(value);
    }
    
    function isArray(value) {
      return value is list;
    }

    function isValidProductData(data) {
      return isString(data.name) &&
             isString(data.category) &&
             isNumber(data.price) &&
             isNumber(data.cost) &&
             isNumber(data.stock) &&
             isString(data.stockUnit) &&
             isNumber(data.minStock) &&
             isString(data.imageUrl) &&
             isString(data.imageHint) &&
             isOptionalString(data.barcode);
    }
    
    function isValidComboData(data) {
        return isString(data.name) &&
               isNumber(data.price) &&
               isArray(data.productIds) &&
               isString(data.imageUrl) &&
               isString(data.imageHint);
    }

    function isValidSaleData(data) {
      return isArray(data.items) &&
             isNumber(data.total) &&
             isString(data.paymentMethod) &&
             isString(data.date);
    }

    function isValidExpenseData(data) {
        return isString(data.description) &&
               isNumber(data.amount) &&
               (data.date is timestamp);
    }

    function isValidCashRegisterData(data) {
        return isNumber(data.initial) &&
               isNumber(data.sales) &&
               isNumber(data.expenses) &&
               isNumber(data.withdrawals) &&
               isNumber(data.additions);
    }

    function isValidMessageData(data) {
        return isString(data.message);
    }


    // Rules for each collection
    match /products/{productId} {
      allow read, list;
      allow create: if isValidProductData(request.resource.data);
      allow update: if isValidProductData(request.resource.data);
      allow delete;
    }

    match /combos/{comboId} {
        allow read, list;
        allow create: if isValidComboData(request.resource.data);
        allow update: if isValidComboData(request.resource.data);
        allow delete;
    }

    match /sales/{saleId} {
      allow read, list;
      allow create: if isValidSaleData(request.resource.data);
    }
    
    match /expenses/{expenseId} {
        allow read, list;
        allow create: if isValidExpenseData(request.resource.data);
    }
    
    match /appState/{docId} {
        // More granular control for appState documents
        allow read;

        match /cashRegister {
            allow write: if isValidCashRegisterData(request.resource.data);
        }
        
        match /dashboardMessage {
             allow write: if isValidMessageData(request.resource.data);
        }

        match /rafaelMessage {
             allow write: if isValidMessageData(request.resource.data);
        }

        // Default deny for any other documents in appState
        allow write: if false;
    }

    // Default deny for any other collections
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
